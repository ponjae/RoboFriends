{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/ponjae/Desktop/UdemyWeb/exercises/robboFriends/robboFriendsRedux/roboFriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,qBAJJ,QAKO,aALP;AAOA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACrCC,EAAAA,IAAI,EAAGN,mBAD8B;AAErCO,EAAAA,OAAO,EAAGF;AAF2B,CAAX,CAAvB;AAKP,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC7CA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACSC,IADT,CACcC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAD1B,EAESF,IAFT,CAEcG,IAAI,IAAIL,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEO;AAAzC,GAAD,CAF9B,EAGSC,KAHT,CAGeC,KAAK,IAAIP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAGH,qBAAR;AAA+BI,IAAAA,OAAO,EAAES;AAAxC,GAAD,CAHhC;AAIH,CANM","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type : CHANGE_SEARCH_FIELD,\n    payload : text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n            .catch(error => dispatch({type : REQUEST_ROBOTS_FAILED, payload: error}))\n}"]},"metadata":{},"sourceType":"module"}